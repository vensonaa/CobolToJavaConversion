Here is the pseudo code that explains the main program logic, identifies data structures and their purposes, describes control flow and business rules, and highlights any special COBOL constructs that need special handling in Java:

**Main Program Logic**

The program is a banking system that reads data from four files: CUSTOMER-FILE, ACCOUNT-FILE, TRANSACTION-FILE, and LOAN-FILE. It processes the data and generates a report in REPORT-FILE.

**Data Structures and Their Purposes**

1. **CUSTOMER-FILE**: Contains customer information, such as ID, name, address, phone, email, date of birth, social security number, status (active/inactive), and creation date.
2. **ACCOUNT-FILE**: Contains account information, such as ID, customer ID, type (savings, checking, loan, credit), balance, interest rate, status (active, frozen, closed), open date, and last transaction date.
3. **TRANSACTION-FILE**: Contains transaction information, such as ID, account ID, type (deposit, withdrawal, transfer, payment), amount, date, time, description, and status (pending, completed, failed).
4. **LOAN-FILE**: Contains loan information, such as ID, customer ID, type (personal, mortgage, business, car), amount, interest rate, term, monthly payment, balance, status (active, paid off, default), open date, and due date.
5. **REPORT-FILE**: Contains the report generated by the program, which includes customer, account, transaction, and loan information.
6. **WORKING-STORAGE SECTION**: Contains variables used for processing, such as file status, end-of-file flags, counters, current date and time, report date, display line, error message, success message, menu choice, and continue flag.

**Control Flow and Business Rules**

1. The program reads the CUSTOMER-FILE, ACCOUNT-FILE, TRANSACTION-FILE, and LOAN-FILE sequentially.
2. For each file, it checks the end-of-file flag and processes the records accordingly.
3. The program maintains counters for each file type (customer, account, transaction, loan) and updates them as it processes the records.
4. It calculates the total balance and total loans for the report.
5. The program generates a report in REPORT-FILE, which includes the processed data.
6. The program displays a menu to the user and allows them to choose an option (not shown in this code chunk).
7. Based on the user's choice, the program performs the corresponding action (not shown in this code chunk).

**Special COBOL Constructs**

1. **FILE STATUS**: COBOL's file status is used to check the status of file operations (e.g., end of file, file not found).
2. **SEQUENTIAL FILE ACCESS**: COBOL's sequential file access is used to read and write files in a sequential manner.
3. **PIC (Picture) Clause**: COBOL's PIC clause is used to define the format of a data item (e.g., numeric, alphanumeric, date).
4. **LEVEL 88 (Condition Names)**: COBOL's LEVEL 88 is used to define condition names (e.g., CUST-ACTIVE, ACC-SAVINGS) that can be used in the program.
5. **WORKING-STORAGE SECTION**: COBOL's WORKING-STORAGE SECTION is used to define variables used for processing.

**Pseudo Code**

```
// Initialize variables and counters
INITIALIZE VARIABLES

// Open files for reading
OPEN CUSTOMER-FILE, ACCOUNT-FILE, TRANSACTION-FILE, LOAN-FILE

// Process CUSTOMER-FILE
READ CUSTOMER-FILE
WHILE NOT END-OF-FILE
    PROCESS CUSTOMER RECORD
    UPDATE CUSTOMER COUNTER
    READ CUSTOMER-FILE
END-WHILE

// Process ACCOUNT-FILE
READ ACCOUNT-FILE
WHILE NOT END-OF-FILE
    PROCESS ACCOUNT RECORD
    UPDATE ACCOUNT COUNTER
    READ ACCOUNT-FILE
END-WHILE

// Process TRANSACTION-FILE
READ TRANSACTION-FILE
WHILE NOT END-OF-FILE
    PROCESS TRANSACTION RECORD
    UPDATE TRANSACTION COUNTER
    READ TRANSACTION-FILE
END-WHILE

// Process LOAN-FILE
READ LOAN-FILE
WHILE NOT END-OF-FILE
    PROCESS LOAN RECORD
    UPDATE LOAN COUNTER
    READ LOAN-FILE
END-WHILE

// Calculate total balance and total loans
CALCULATE TOTAL BALANCE AND TOTAL LOANS

// Generate report in REPORT-FILE
GENERATE REPORT

// Display menu to user
DISPLAY MENU

// Process user's choice
PROCESS USER'S CHOICE

// Close files
CLOSE CUSTOMER-FILE, ACCOUNT-FILE, TRANSACTION-FILE, LOAN-FILE
```

Note that this pseudo code is a high-level representation of the program logic and may not include all the details of the COBOL code.

=== CHUNK SEPARATOR ===

Here is the pseudo code that explains the logic and structure of the given COBOL code:

**Main Program Logic**

1. Initialize the program by performing the following steps:
	* Open input files (customer, account, transaction, and loan files)
	* Get the current date and time
	* Display a welcome message
	* Load statistics from the input files
2. Display a menu to the user and process their choice until they choose to exit
3. Finalize the program by closing files and stopping the run

**Data Structures and Their Purposes**

1. `WS-SEARCH-CUST-ID`, `WS-SEARCH-ACC-ID`, `WS-SEARCH-LOAN-ID`, `WS-SEARCH-DATE-FROM`, and `WS-SEARCH-DATE-TO`: These variables are used to store search criteria for customers, accounts, loans, and dates.
2. `WS-CALCULATION-FIELDS`: This group contains variables used for calculations, such as interest amounts, new balances, payment amounts, and remaining balances.
3. `WS-REPORT-HEADERS`: This group contains variables used to store report headers, including the title, subtitle, and a line separator.
4. `WS-STATISTICS`: This group contains variables used to store statistical data, such as total customers, active accounts, total transactions, active loans, and average account and loan balances.

**Control Flow and Business Rules**

1. The program initializes by opening input files, getting the current date and time, displaying a welcome message, and loading statistics from the input files.
2. The program then enters a loop where it displays a menu to the user and processes their choice until they choose to exit.
3. The menu choices are:
	* Customer Management (choice 1)
	* Account Management (choice 2)
	* Transaction Processing (choice 3)
	* Loan Management (choice 4)
	* Generate Reports (choice 5)
	* System Statistics (choice 6)
	* Exit (choice 7)
4. Each menu choice performs a specific set of actions, such as counting customers, accounts, transactions, and loans, and calculating averages.
5. The program uses `PERFORM` statements to execute specific paragraphs of code, and `IF` statements to evaluate conditions and perform actions accordingly.
6. The program uses `READ` statements to read data from input files, and `AT END` and `NOT AT END` clauses to handle end-of-file conditions.
7. The program uses `COMPUTE` statements to perform calculations, such as averaging account and loan balances.

**Special COBOL Constructs**

1. `PERFORM` statements: These statements are used to execute specific paragraphs of code. In Java, these can be replaced with method calls or loops.
2. `IF` statements with `END-IF` clauses: These statements are used to evaluate conditions and perform actions accordingly. In Java, these can be replaced with `if` statements and `else` clauses.
3. `READ` statements with `AT END` and `NOT AT END` clauses: These statements are used to read data from input files and handle end-of-file conditions. In Java, these can be replaced with `BufferedReader` or `Scanner` objects and `hasNextLine()` or `nextLine()` methods.
4. `COMPUTE` statements: These statements are used to perform calculations. In Java, these can be replaced with arithmetic expressions and assignment statements.

Note that this pseudo code is a high-level representation of the COBOL code, and may not include every detail or nuance of the original code.

=== CHUNK SEPARATOR ===

Here is the pseudo code that explains the main program logic, identifies data structures and their purposes, describes control flow and business rules, and highlights any special COBOL constructs that need special handling in Java:

**Main Program Logic**

1. The program starts by evaluating a user input (WS-MENU-CHOICE) and performing one of the following actions:
	* ACCOUNT-MANAGEMENT
	* TRANSACTION-PROCESSING
	* LOAN-MANAGEMENT
	* GENERATE-REPORTS
	* DISPLAY-STATISTICS
	* Continue to the next step (WS-CONTINUE-NO set to TRUE)
	* Display an error message for invalid input
2. If WS-CONTINUE-YES is TRUE, the program displays a message and waits for the user to press Enter.
3. The program then enters a loop that allows the user to manage customers, accounts, loans, and reports.

**Data Structures and Their Purposes**

* WS-MENU-CHOICE: a variable that stores the user's menu choice (1-7)
* WS-CONTINUE-NO: a flag that indicates whether to continue to the next step
* WS-CONTINUE-YES: a flag that indicates whether to display a message and wait for the user to press Enter
* CUST-ID: a variable that stores the customer ID
* CUST-NAME: a variable that stores the customer name
* CUST-ADDRESS: a variable that stores the customer address
* CUST-PHONE: a variable that stores the customer phone number
* CUST-EMAIL: a variable that stores the customer email
* CUST-DOB: a variable that stores the customer date of birth
* CUST-SSN: a variable that stores the customer social security number
* CUST-STATUS: a variable that stores the customer status (A for active, I for inactive)
* CUST-CREATE-DATE: a variable that stores the customer creation date
* WS-SEARCH-CUST-ID: a variable that stores the customer ID to search for
* WS-CUSTOMER-EOF-YES: a flag that indicates whether the end of the customer file has been reached

**Control Flow and Business Rules**

* The program uses EVALUATE statements to evaluate the user's input and perform the corresponding action.
* The program uses IF-ELSE statements to handle different scenarios, such as searching for a customer or updating a customer's information.
* The program uses PERFORM statements to execute subroutines, such as SEARCH-CUSTOMER-BY-ID and DISPLAY-CUSTOMER-DETAILS.
* The program uses REWIND and READ statements to read from a file (CUSTOMER-FILE) and search for a customer.
* The program uses MOVE statements to update the customer status and creation date.

**Special COBOL Constructs**

* EVALUATE statements: These statements are used to evaluate a value and perform one of several actions based on the value. In Java, this can be implemented using switch statements or if-else statements.
* PERFORM statements: These statements are used to execute a subroutine. In Java, this can be implemented using method calls.
* REWIND and READ statements: These statements are used to read from a file. In Java, this can be implemented using file input/output streams.
* MOVE statements: These statements are used to update a variable. In Java, this can be implemented using assignment statements.

Here is a more detailed pseudo code for each section:

**CUSTOMER-MANAGEMENT**

1. Display a menu to the user with options to add, search, update, delete, or list customers.
2. Evaluate the user's input and perform the corresponding action:
	* Add customer: prompt the user to enter customer information and add the customer to the file.
	* Search customer: prompt the user to enter a customer ID and search for the customer in the file.
	* Update customer: prompt the user to enter a customer ID and update the customer's information.
	* Delete customer: prompt the user to enter a customer ID and mark the customer as inactive.
	* List customers: display a list of all active customers.

**SEARCH-CUSTOMER-BY-ID**

1. Rewind the customer file.
2. Read the customer file until the end of the file is reached or the customer ID is found.
3. If the customer ID is found, exit the loop and return the customer information.

**DISPLAY-CUSTOMER-DETAILS**

1. Display the customer details, including ID, name, address, phone, email, date of birth, social security number, status, and creation date.

**UPDATE-CUSTOMER**

1. Prompt the user to enter a customer ID to update.
2. Search for the customer in the file using SEARCH-CUSTOMER-BY-ID.
3. If the customer is found, prompt the user to enter new customer information and update the customer's record.

**DELETE-CUSTOMER**

1. Prompt the user to enter a customer ID to delete.
2. Search for the customer in the file using SEARCH-CUSTOMER-BY-ID.
3. If the customer is found, mark the customer as inactive.

**LIST-CUSTOMERS**

1. Rewind the customer file.
2. Read the customer file until the end of the file is reached.
3. For each active customer, display the customer ID, name, and status.

Note that this pseudo code is a simplified representation of the original COBOL code and may not include all the details and nuances of the original code.

=== CHUNK SEPARATOR ===

Here is the pseudo code that explains the main program logic, identifies data structures and their purposes, describes control flow and business rules, and highlights any special COBOL constructs that need special handling in Java:

**Main Program Logic**

The program is a banking system that allows users to perform various operations on accounts, including opening new accounts, searching for accounts, updating account details, closing accounts, listing all accounts, and processing transactions.

**Data Structures and Their Purposes**

* `ACC-CUST-ID`: Customer ID (string)
* `ACC-TYPE`: Account type (string, one of SV, CH, LN, CR)
* `ACC-BALANCE`: Account balance (numeric)
* `ACC-INTEREST-RATE`: Interest rate (numeric)
* `ACC-STATUS`: Account status (string, one of A, C)
* `ACC-OPEN-DATE`: Account open date (date)
* `ACC-LAST-TRANS`: Last transaction date (date)
* `WS-SEARCH-ACC-ID`: Search account ID (string)
* `WS-CURRENT-DATE`: Current date (date)
* `WS-ACCOUNT-EOF-YES`: End-of-file flag for account file (boolean)
* `TRANS-AMOUNT`: Transaction amount (numeric)
* `WS-MENU-CHOICE`: Menu choice (numeric, 1-5)

**Control Flow and Business Rules**

1. **Open New Account**
	* Display "Open New Account" prompt
	* Accept customer ID, account type, initial balance, and interest rate
	* Set account status to "A" (active)
	* Set open date and last transaction date to current date
	* Display "Account opened successfully!"
2. **Search Account**
	* Display "Search Account" prompt
	* Accept search account ID
	* Search for account in file using `SEARCH-ACCOUNT-BY-ID` procedure
	* If account found, display account details using `DISPLAY-ACCOUNT-DETAILS` procedure
	* If account not found, display "Account not found."
3. **Update Account**
	* Display "Update Account" prompt
	* Accept search account ID
	* Search for account in file using `SEARCH-ACCOUNT-BY-ID` procedure
	* If account found, update balance and display "Account updated successfully!"
	* If account not found, display "Account not found."
4. **Close Account**
	* Display "Close Account" prompt
	* Accept search account ID
	* Search for account in file using `SEARCH-ACCOUNT-BY-ID` procedure
	* If account found, set account status to "C" (closed) and display "Account closed successfully!"
	* If account not found, display "Account not found."
5. **List All Accounts**
	* Display "All Accounts" prompt
	* Read account file and display active accounts with details
6. **Transaction Processing**
	* Display "Transaction Processing" menu
	* Accept menu choice (1-5)
	* Perform corresponding transaction processing procedure (e.g., deposit, withdrawal, transfer, payment, view transaction history)

**Special COBOL Constructs**

* `PERFORM` statement: equivalent to a Java method call
* `ACCEPT` statement: equivalent to a Java `Scanner` input
* `DISPLAY` statement: equivalent to a Java `System.out.println` statement
* `MOVE` statement: equivalent to a Java assignment statement
* `IF` statement: equivalent to a Java `if` statement
* `EVALUATE` statement: equivalent to a Java `switch` statement
* `REWIND` statement: equivalent to a Java file rewind operation
* `READ` statement: equivalent to a Java file read operation
* `AT END` clause: equivalent to a Java file end-of-file check
* `NOT AT END` clause: equivalent to a Java file not end-of-file check

Note that this pseudo code is a simplified representation of the COBOL code and may not include all the details and nuances of the original code.

=== CHUNK SEPARATOR ===

Here is the pseudo code that explains the main program logic, identifies data structures and their purposes, describes control flow and business rules, and highlights any special COBOL constructs that need special handling in Java:

**Main Program Logic**

The program is a banking system that provides various functions for account management, loan management, and transaction history. The program is divided into several sections, each performing a specific function.

**Data Structures and Their Purposes**

* `WS-SEARCH-ACC-ID`: A variable to store the account ID entered by the user for searching.
* `TRANS-ACC-ID`: A variable to store the account ID for transfer or payment.
* `TRANS-AMOUNT`: A variable to store the amount for transfer or payment.
* `ACC-ID`: A variable to store the account ID retrieved from the database.
* `ACC-ACTIVE`: A flag to indicate if the account is active or not.
* `ACC-BALANCE`: A variable to store the current balance of the account.
* `ACC-LAST-TRANS`: A variable to store the last transaction date of the account.
* `WS-CURRENT-DATE`: A variable to store the current date.
* `LOAN-CUST-ID`: A variable to store the customer ID for loan application.
* `LOAN-TYPE`: A variable to store the loan type (PL/MG/BL/CL).
* `LOAN-AMOUNT`: A variable to store the loan amount.
* `LOAN-INTEREST-RATE`: A variable to store the interest rate for the loan.
* `LOAN-TERM`: A variable to store the loan term in months.
* `LOAN-MONTHLY-PAYMENT`: A variable to store the monthly payment amount.
* `LOAN-STATUS`: A variable to store the loan status (A for active).
* `LOAN-OPEN-DATE`: A variable to store the loan open date.
* `LOAN-DUE-DATE`: A variable to store the loan due date.
* `WS-TRANSACTION-EOF-YES`: A flag to indicate the end of the transaction file.
* `WS-LOAN-EOF-YES`: A flag to indicate the end of the loan file.

**Control Flow and Business Rules**

1. **Transfer Funds**
	* Prompt the user to enter the from account ID, to account ID, and amount.
	* Search for the from account ID and check if it exists and is active.
	* If the account exists and is active, check if the balance is sufficient for the transfer.
	* If the balance is sufficient, subtract the transfer amount from the balance and update the last transaction date.
	* Display a success message and the new balance.
	* If the balance is insufficient, display an error message.
2. **Process Payment**
	* Prompt the user to enter the account ID and payment amount.
	* Search for the account ID and check if it exists and is active.
	* If the account exists and is active, check if the balance is sufficient for the payment.
	* If the balance is sufficient, subtract the payment amount from the balance and update the last transaction date.
	* Display a success message and the new balance.
	* If the balance is insufficient, display an error message.
3. **View Transaction History**
	* Prompt the user to enter the account ID.
	* Read the transaction file and display all transactions for the entered account ID.
4. **Loan Management**
	* Display a menu for loan management options (apply for loan, search loan, make loan payment, view loan details, list all loans).
	* Based on the user's choice, perform the corresponding function.
5. **Apply for Loan**
	* Prompt the user to enter the customer ID, loan type, loan amount, interest rate, and term.
	* Calculate the monthly payment using the formula: `LOAN-MONTHLY-PAYMENT = LOAN-AMOUNT * (WS-MONTHLY-INTEREST * (1 + WS-MONTHLY-INTEREST) ** LOAN-TERM) / ((1 + WS-MONTHLY-INTEREST) ** LOAN-TERM - 1)`.
	* Set the loan status to active and store the loan details.
	* Display a success message and the monthly payment amount.
6. **Search Loan**
	* Prompt the user to enter the loan ID.
	* Search for the loan ID and retrieve the loan details.
	* If the loan exists, display the loan details.
	* If the loan does not exist, display an error message.
7. **Make Loan Payment**
	* Prompt the user to enter the loan ID.
	* Search for the loan ID and retrieve the loan details.
	* If the loan exists, update the loan balance and display a success message.

**Special COBOL Constructs**

* `PERFORM` statements are used to call subroutines or paragraphs.
* `ACCEPT` statements are used to read input from the user.
* `DISPLAY` statements are used to display output to the user.
* `COMPUTE` statements are used to perform arithmetic operations.
* `EVALUATE` statements are used to evaluate a condition and perform different actions based on the result.
* `REWIND` statements are used to rewind a file to the beginning.
* `READ` statements are used to read a record from a file.
* `AT END` and `NOT AT END` clauses are used to handle end-of-file conditions.

Note that this pseudo code is written in a way that is easy to understand for Java developers, but it may not be a direct translation of the COBOL code.

=== CHUNK SEPARATOR ===

Here is the pseudo code that explains the main program logic, identifies data structures and their purposes, describes control flow and business rules, and highlights any special COBOL constructs that need special handling in Java:

**Main Program Logic**

1. The program starts by displaying a menu to the user, allowing them to choose from various options:
	* Make a payment
	* View loan details
	* List all loans
	* Generate reports
2. Based on the user's choice, the program performs the corresponding action:
	* Make a payment: prompts the user to enter a payment amount, searches for the loan by ID, and updates the loan balance if the payment is valid.
	* View loan details: prompts the user to enter a loan ID, searches for the loan, and displays the loan details if found.
	* List all loans: displays a list of all active loans.
	* Generate reports: displays a menu to choose from various report types (customer, account, transaction, loan, summary), generates the chosen report, and displays a success message.

**Data Structures and Their Purposes**

1. `WS-PAYMENT-AMOUNT`: a working storage variable to hold the user-input payment amount.
2. `WS-SEARCH-LOAN-ID`: a working storage variable to hold the user-input loan ID for searching.
3. `LOAN-ID`: a data structure to hold the loan ID.
4. `LOAN-BALANCE`: a data structure to hold the loan balance.
5. `LOAN-ACTIVE`: a flag to indicate whether the loan is active or not.
6. `LOAN-STATUS`: a data structure to hold the loan status (e.g., 'P' for paid off).
7. `WS-LOAN-EOF-YES`: a flag to indicate whether the end of the loan file has been reached.
8. `REPORT-RECORD`: a data structure to hold the report record.
9. `WS-REPORT-TITLE`: a working storage variable to hold the report title.
10. `WS-REPORT-LINE`: a working storage variable to hold the report line.

**Control Flow and Business Rules**

1. The program uses `PERFORM` statements to execute procedures in a specific order.
2. The program uses `IF` statements to evaluate conditions and perform actions based on the results.
3. The program uses `EVALUATE` statements to evaluate a value and perform actions based on the result.
4. The program uses `READ` and `WRITE` statements to interact with files.
5. The program uses `REWIND` statements to rewind files to the beginning.
6. The program uses `AT END` and `NOT AT END` clauses to handle end-of-file conditions.

**Special COBOL Constructs**

1. `WITH NO ADVANCING`: a clause used with `DISPLAY` statements to prevent the cursor from advancing to the next line.
2. `ACCEPT`: a statement used to read input from the user.
3. `PERFORM UNTIL`: a statement used to execute a procedure until a condition is met.
4. `END-READ` and `END-PERFORM`: statements used to mark the end of a `READ` or `PERFORM` block.
5. `SET`: a statement used to set a flag or indicator to a specific value.

**Pseudo Code**

```
// Main Program Logic
while (true) {
    displayMenu();
    choice = getUserChoice();

    switch (choice) {
        case MAKE_PAYMENT:
            makePayment();
            break;
        case VIEW_LOAN_DETAILS:
            viewLoanDetails();
            break;
        case LIST_LOANS:
            listLoans();
            break;
        case GENERATE_REPORTS:
            generateReports();
            break;
        default:
            displayError("Invalid choice");
    }
}

// Make Payment
void makePayment() {
    display("Enter payment amount: ");
    paymentAmount = getUserInput();
    searchLoanById();
    if (loanFound && loanActive) {
        if (paymentAmount <= loanBalance) {
            loanBalance -= paymentAmount;
            if (loanBalance == 0) {
                loanStatus = 'P';
                display("Loan paid off completely!");
            } else {
                display("Payment processed successfully!");
                display("Remaining balance: $" + loanBalance);
            }
        } else {
            display("Payment amount exceeds loan balance.");
        }
    } else {
        display("Loan not found or not active.");
    }
}

// View Loan Details
void viewLoanDetails() {
    display("Enter loan ID: ");
    loanId = getUserInput();
    searchLoanById();
    if (loanFound) {
        displayLoanDetails();
    } else {
        display("Loan not found.");
    }
}

// List Loans
void listLoans() {
    rewindLoanFile();
    while (!eof) {
        readLoanFile();
        if (loanActive) {
            display(loanId + " - " + loanCustId + " - " + loanType + " - $" + loanBalance);
        }
    }
}

// Generate Reports
void generateReports() {
    displayMenu();
    choice = getUserChoice();

    switch (choice) {
        case CUSTOMER_REPORT:
            generateCustomerReport();
            break;
        case ACCOUNT_REPORT:
            generateAccountReport();
            break;
        case TRANSACTION_REPORT:
            generateTransactionReport();
            break;
        case LOAN_REPORT:
            generateLoanReport();
            break;
        case SUMMARY_REPORT:
            generateSummaryReport();
            break;
        default:
            displayError("Invalid choice");
    }
}

// Generate Customer Report
void generateCustomerReport() {
    display("Generating customer report...");
    writeReportRecord("CUSTOMER REPORT");
    rewindCustomerFile();
    while (!eof) {
        readCustomerFile();
        if (custActive) {
            writeReportRecord(custId);
        }
    }
    display("Customer report generated successfully!");
}

// Generate Account Report
void generateAccountReport() {
    display("Generating account report...");
    writeReportRecord("ACCOUNT REPORT");
    rewindAccountFile();
    while (!eof) {
        readAccountFile();
        if (accActive) {
            writeReportRecord(accId);
        }
    }
    display("Account report generated successfully!");
}

// Generate Transaction Report
void generateTransactionReport() {
    display("Generating transaction report...");
    writeReportRecord("TRANSACTION REPORT");
    rewindTransactionFile();
    while (!eof) {
        readTransactionFile();
        writeReportRecord(transId);
    }
    display("Transaction report generated successfully!");
}

// Generate Loan Report
void generateLoanReport() {
    display("Generating loan report...");
    writeReportRecord("LOAN REPORT");
    rewindLoanFile();
    while (!eof) {
        readLoanFile();
        if (loanActive) {
            writeReportRecord(loanId);
        }
    }
    display("Loan report generated successfully!");
}

// Generate Summary Report
void generateSummaryReport() {
    display("Generating summary report...");
    writeReportRecord("SUMMARY REPORT");
    // TO DO: implement summary report generation
}
```

Note that this pseudo code is a simplified representation of the original COBOL code and may not include all the details and nuances of the original code.

=== CHUNK SEPARATOR ===

Here is the pseudo code that explains the logic and structure of the given COBOL code:

**Main Program Logic**

1. Generate a summary report by writing data to a report file.
2. Display system statistics to the user.
3. Handle any errors that may occur.
4. Finalize the program by closing all files and displaying a shutdown message.

**Data Structures and Their Purposes**

* `WS-REPORT-LINE`: A working storage area that holds a single line of data to be written to the report file.
* `REPORT-RECORD`: A record structure that represents a single line of data in the report file.
* `WS-TOTAL-CUSTOMERS`, `WS-ACTIVE-ACCOUNTS`, `WS-TOTAL-TRANSACTIONS`, `WS-ACTIVE-LOANS`, `WS-TOTAL-BALANCE`, `WS-TOTAL-LOANS`, `WS-AVG-ACCOUNT-BALANCE`, `WS-AVG-LOAN-AMOUNT`: Working storage variables that hold summary data to be displayed and written to the report file.
* `WS-ERROR-MESSAGE`: A working storage variable that holds an error message to be displayed in case of an error.
* `CUSTOMER-FILE`, `ACCOUNT-FILE`, `TRANSACTION-FILE`, `LOAN-FILE`, `REPORT-FILE`: File variables that represent the input files and the report file.

**Control Flow and Business Rules**

1. The program starts by writing a summary report to the report file using the `WRITE` statement.
2. The program then moves data from working storage variables to the `REPORT-RECORD` structure and writes it to the report file using the `WRITE` statement.
3. The program displays system statistics to the user using the `DISPLAY` statement.
4. If an error occurs, the program displays an error message using the `DISPLAY` statement.
5. The program finalizes by closing all files using the `CLOSE` statement and displaying a shutdown message using the `DISPLAY` statement.

**Special COBOL Constructs**

* `WRITE` statement: In COBOL, the `WRITE` statement is used to write data to a file. In Java, this can be achieved using a `PrintWriter` or a `BufferedWriter`.
* `MOVE` statement: In COBOL, the `MOVE` statement is used to copy data from one variable to another. In Java, this can be achieved using assignment statements.
* `DISPLAY` statement: In COBOL, the `DISPLAY` statement is used to display data to the user. In Java, this can be achieved using `System.out.println()` or a GUI component.
* `CLOSE` statement: In COBOL, the `CLOSE` statement is used to close a file. In Java, this can be achieved using a `FileWriter` or a `BufferedWriter`.

**Pseudo Code**

```
// Generate summary report
writeReport() {
    writeLineToReport("Summary report generated successfully!");
    writeDataToReport(WS-TOTAL-CUSTOMERS);
    writeDataToReport(WS-ACTIVE-ACCOUNTS);
    writeDataToReport(WS-TOTAL-TRANSACTIONS);
    writeDataToReport(WS-ACTIVE-LOANS);
}

// Display system statistics
displayStatistics() {
    display(" ");
    display("=== SYSTEM STATISTICS ===");
    display("Total Customers: " + WS-TOTAL-CUSTOMERS);
    display("Active Accounts: " + WS-ACTIVE-ACCOUNTS);
    display("Total Transactions: " + WS-TOTAL-TRANSACTIONS);
    display("Active Loans: " + WS-ACTIVE-LOANS);
    display("Total Account Balance: $" + WS-TOTAL-BALANCE);
    display("Total Loan Balance: $" + WS-TOTAL-LOANS);
    display("Average Account Balance: $" + WS-AVG-ACCOUNT-BALANCE);
    display("Average Loan Amount: $" + WS-AVG-LOAN-AMOUNT);
}

// Handle errors
handleError() {
    display("ERROR: " + WS-ERROR-MESSAGE);
}

// Finalize program
finalizeProgram() {
    closeFile(CUSTOMER-FILE);
    closeFile(ACCOUNT-FILE);
    closeFile(TRANSACTION-FILE);
    closeFile(LOAN-FILE);
    closeFile(REPORT-FILE);
    display(" ");
    display("===============================================");
    display("           BANKING SYSTEM SHUTDOWN");
    display("===============================================");
    display("All files closed successfully.");
    display("Program terminated normally.");
}

// Main program logic
main() {
    writeReport();
    displayStatistics();
    handleError();
    finalizeProgram();
}
```

Note that this pseudo code is written in a Java-like syntax to make it easier for Java developers to understand. However, the actual implementation in Java would require using Java-specific constructs and libraries.